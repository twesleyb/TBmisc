idx <- hitpredict$Uniprot1[is_missing] %in% uniprot$`UniProtKB-AC`
ensembl <- sapply(strsplit(
uniprot$Ensembl[match(hitpredict$Uniprot1[is_missing],uniprot$`UniProtKB-AC`)],";"), "[",1)
entrez <- mapIds(database, keys = ensembl, column = "ENTREZID",
keytype = "ENSEMBL", multivals = "first")
hitpredict <- fix_entrez(uniprot_db$ms, taxid=10090)
taxid=10090
uniprot <- uniprot_db$mus
# Get gene id mapping database for a given taxid.
if (taxid == 9606) {
require(org.Hs.eg.db)
database <- org.Hs.eg.db
message("Mapping human uniprot IDs to entrez!")
} else if (taxid == 10090) {
require(org.Mm.eg.db)
database <- org.Mm.eg.db
message("Mapping mouse uniprot IDs to entrez!")
} else if (taxid == 10116) {
require(org.Rn.eg.db)
database <- org.Rn.eg.db
message("Mapping rat uniprot IDs to entrez!")
} else {
stop("Please provide valid taxid c(9606, 10090, 10116).")
}
is_missing <- is.na(hitpredict$Entrez1[hitpredict$Taxonomy==taxid])
idx <- hitpredict$Uniprot1[is_missing] %in% uniprot$`UniProtKB-AC`
ensembl <- sapply(strsplit(
uniprot$Ensembl[match(hitpredict$Uniprot1[is_missing],uniprot$`UniProtKB-AC`)],";"), "[",1)
entrez <- mapIds(database, keys = ensembl, column = "ENTREZID",
keytype = "ENSEMBL", multivals = "first")
# Remove null entries.
names(entrez) <- ensembl
entrez[seq(1:length(entrez))[unlist(lapply(entrez, is.null))]] <- NA
# Add back to data.
hitpredict$Entrez1[is_missing] <- unlist(entrez)
# Repeat for second protein...
is_missing <- is.na(hitpredict$Entrez2[hitpredict$Taxonomy==taxid])
idx <- hitpredict$Uniprot2[is_missing] %in% uniprot$`UniProtKB-AC`
ensembl <- sapply(strsplit(
uniprot_db$Ensembl[match(hitpredict$Uniprot2[is_missing],uniprot$`UniProtKB-AC`)],";"), "[",1)
ensembl <- sapply(strsplit(
uniprot$Ensembl[match(hitpredict$Uniprot2[is_missing],uniprot$`UniProtKB-AC`)],";"), "[",1)
entrez <- mapIds(database, keys = ensembl, column = "ENTREZID",
keytype = "ENSEMBL", multivals = "first")
# Remove null entries.
names(entrez) <- ensembl
entrez[seq(1:length(entrez))[unlist(lapply(entrez, is.null))]] <- NA
# Add back to data.
hitpredict$Entrez2[is_missing] <- unlist(entrez)
hitpredict <- fix_entrez(uniprot_db$hs, taxid=9606)
hitpredict <- fix_entrez(uniprot_db$mus, taxid=10090)
# Map uniprot IDs....
fix_entrez <- function(uniprot,taxid) {
# Get gene id mapping database for a given taxid.
if (taxid == 9606) {
require(org.Hs.eg.db)
database <- org.Hs.eg.db
message("Mapping human uniprot IDs to entrez!")
} else if (taxid == 10090) {
require(org.Mm.eg.db)
database <- org.Mm.eg.db
message("Mapping mouse uniprot IDs to entrez!")
} else if (taxid == 10116) {
require(org.Rn.eg.db)
database <- org.Rn.eg.db
message("Mapping rat uniprot IDs to entrez!")
} else {
stop("Please provide valid taxid c(9606, 10090, 10116).")
}
is_missing <- is.na(hitpredict$Entrez1[hitpredict$Taxonomy==taxid])
idx <- hitpredict$Uniprot1[is_missing] %in% uniprot$`UniProtKB-AC`
ensembl <- sapply(strsplit(
uniprot$Ensembl[match(hitpredict$Uniprot1[is_missing],uniprot$`UniProtKB-AC`)],";"), "[",1)
entrez <- mapIds(database, keys = ensembl, column = "ENTREZID",
keytype = "ENSEMBL", multivals = "first")
# Remove null entries.
names(entrez) <- ensembl
entrez[seq(1:length(entrez))[unlist(lapply(entrez, is.null))]] <- NA
# Add back to data.
hitpredict$Entrez1[is_missing] <- unlist(entrez)
# Repeat for second protein...
is_missing <- is.na(hitpredict$Entrez2[hitpredict$Taxonomy==taxid])
idx <- hitpredict$Uniprot2[is_missing] %in% uniprot$`UniProtKB-AC`
ensembl <- sapply(strsplit(
uniprot$Ensembl[match(hitpredict$Uniprot2[is_missing],uniprot$`UniProtKB-AC`)],";"), "[",1)
entrez <- mapIds(database, keys = ensembl, column = "ENTREZID",
keytype = "ENSEMBL", multivals = "first")
# Remove null entries.
names(entrez) <- ensembl
entrez[seq(1:length(entrez))[unlist(lapply(entrez, is.null))]] <- NA
# Add back to data.
hitpredict$Entrez2[is_missing] <- unlist(entrez)
return(hitpredict)
}
hitpredict <- fix_entrez(uniprot_db$hs, taxid=9606)
hitpredict <- fix_entrez(uniprot_db$mus, taxid=10090)
hitpredict <- fix_entrez(uniprot_db$rat, taxid=10116)
# Number of remaining unmapped genes:
# Was: 13,865 -> Now: 8,825
print(paste(
"Number of unmapped genes remaining in the HitPredict database:",
table(c(is.na(hitpredict$Entrez1), is.na(hitpredict$Entrez2)))[2]
))
#!/bin/usr/env Rscript
# Analysis of iPSD phosphoproteome.
#------------------------------------------------------------------------------
## Prepare the workspace.
#------------------------------------------------------------------------------
# Imports.
suppressPackageStartupMessages({
library(readxl)
library(AnnotationDbi)
library(org.Mm.eg.db)
library(org.Hs.eg.db)
library(org.Rn.eg.db)
library(data.table)
library(igraph)
library(dplyr)
library(RCy3)
library(TBmiscr)
})
# Directories.
here <- getwd()
if (strsplit(osVersion," ")[[1]][1]=="Windows") {
here <- "D:/projects/iPSD-PTM/data"; setwd(here)
}
rootdir <- dirname(here)
datadir <- file.path(rootdir,"data")
#------------------------------------------------------------------------------
## Load the iBioID phosphoproteomics data. Map gene IDs to entrez.
#------------------------------------------------------------------------------
# Load the data.
myfile <- file.path(datadir,"iPSD_PTM_BioID.xlsx")
data <- read_excel(myfile, sheet = 1)
# Map protein identifiers to entrez.
genes <- data$GN
entrez <- mapIds(org.Mm.eg.db, keys = genes, column = "ENTREZID",
keytype = "SYMBOL", multivals = "first")
# How many genes were not mapped to entrez?
not_mapped <- is.na(entrez)
# Try mapping mgi ids.
mgi <- paste0("MGI:",data$"MGI:ID"[not_mapped])
entrez[not_mapped] <- mapIds(org.Mm.eg.db, keys = mgi, column = "ENTREZID",
keytype = "MGI", multivals = "first")
# Check.
if (sum(is.na(entrez)) == 0){
message("Successfully mapped all gene identifiers in proteomics data to entrez IDs.")
}
# Collect entrez ids.
iPSD_PTM <- unique(entrez)
message(paste(length(iPSD_PTM),"unique phosphoproteins identified!"))
#-------------------------------------------------------------------------------
## Load compiled iPSD proteome.
#-------------------------------------------------------------------------------
# Loop to read iPSD compiled excel data.
# Warnings raised because of missing column names...
myfile <- file.path(datadir,"iPSD_Compiled_Proteome.xlsx")
iPSD <- list()
for (sheet in 1:length(excel_sheets(myfile))) {
iPSD[[sheet]] <- read_excel(myfile, sheet)
}
names(iPSD) <- excel_sheets(myfile)
# Get compiled iPSD proteome.
ciPSD <- iPSD[[10]]
#-------------------------------------------------------------------------------
## Load HitPredict interactions.
#-------------------------------------------------------------------------------
# Download HitPredict data. This will take several minutes.
url <- "http://www.hitpredict.org/download/HitPredict_interactions.txt.tgz"
gzfile <- file.path(datadir, "HitPredict_interactions.txt.tgz")
if (!file.exists(gzfile)) {
message("Downloading PPIs from HitPredict.org...")
download.file(url, gzfile)
} else {
message("file already exists!")
}
# Unzip and read data.
untar(gzfile, exdir=datadir)
myfile <- file.path(datadir, "HitPredict_interactions.txt")
hitpredict <- data.table::fread(myfile, header = TRUE, skip = 5)
unlink(myfile)
# We need to insure that genes are mapped to a stable, unique identifier.
# First, replace blanks with NA.
hitpredict[hitpredict == ""] <- NA
# Keep just the first entrez id.
hitpredict$Entrez1 <- sapply(strsplit(hitpredict$Entrez1,";"),"[",1)
hitpredict$Entrez2 <- sapply(strsplit(hitpredict$Entrez2,";"),"[",1)
# Subset human, mouse, and rat data.
taxids <- c(9606, 10090, 10116)
hitpredict <- subset(hitpredict, hitpredict$Taxonomy %in% taxids)
# Number of unmapped genes:
print(paste(
"Number of unmapped genes in the HitPredict database:",
table(c(is.na(hitpredict$Entrez1), is.na(hitpredict$Entrez2)))[2]
))
#-------------------------------------------------------------------------------
## Map missing Entrez IDs.
#-------------------------------------------------------------------------------
# Define a function that utilizes the AnnotationDbi mapIds() function and
# organism specific databases (e.g. org.Mm.eg.db) to map Uniprot Ids to Entrez IDS.
getEntrez <- function(hitpredict,taxid) {
# Get gene id mapping database for a given taxid.
if (taxid == 9606) {
require(org.Hs.eg.db)
database <- org.Hs.eg.db
message("Mapping human uniprot IDs to entrez!")
} else if (taxid == 10090) {
require(org.Mm.eg.db)
database <- org.Mm.eg.db
message("Mapping mouse uniprot IDs to entrez!")
} else if (taxid == 10116) {
require(org.Rn.eg.db)
database <- org.Rn.eg.db
message("Mapping rat uniprot IDs to entrez!")
} else {
stop("Please provide valid taxid c(9606, 10090, 10116).")
}
# Get all Uniprot IDs for a given taxid.
uniprot <- unique(c(as.character(hitpredict$Uniprot1)[hitpredict$Taxonomy == taxid]),
as.character(hitpredict$Uniprot2)[hitpredict$Taxonomy == taxid])
# Map Uniprot ids to entrez.
entrez <- mapIds(database, keys = uniprot, column = "ENTREZID",
keytype = "UNIPROT", multiVals = "first")
# Create Entrez2Uniprot map.
protmap <- as.list(entrez)
names(protmap) <- uniprot
# Map missing Entrez1.
is_missing1 <- is.na(hitpredict$Entrez1) & hitpredict$Taxonomy == taxid
hitpredict$Entrez1[is_missing1] <- unlist(protmap[hitpredict$Uniprot1[is_missing1]])
# Map missing Entrez2.
is_missing2 <- is.na(hitpredict$Entrez2) & hitpredict$Taxonomy == taxid
hitpredict$Entrez2[is_missing2] <- unlist(protmap[hitpredict$Uniprot1[is_missing2]])
return(hitpredict)
}
# Do mapping for each species.
hitpredict <- getEntrez(hitpredict,taxids[1])
hitpredict <- getEntrez(hitpredict,taxids[2])
hitpredict <- getEntrez(hitpredict,taxids[3])
# Number of remaining unmapped genes:
# Was: 13,865 -> Now: 8,825
print(paste(
"Number of unmapped genes remaining in the HitPredict database:",
table(c(is.na(hitpredict$Entrez1), is.na(hitpredict$Entrez2)))[2]
))
#-------------------------------------------------------------------------------
## Try mapping remaining unmapped genes by their uniprot mnonic.
#-------------------------------------------------------------------------------
# Define a function that will download Uniprot mapping data for a given organism.
build_uniprotDB <- function(db){
# Which database should be downloaded?
baseurl <- "ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/idmapping/by_organism/"
extension <- "_idmapping_selected.tab.gz"
url <- paste0(baseurl,db,extension)
gzfile <- file.path(datadir,basename(url))
destfile <- tools::file_path_sans_ext(gzfile)
# Download
if (!file.exists(gzfile)) {
message(paste0("Downloading ", gzfile,"..."))
download.file(url, gzfile, quiet = TRUE)
} else {
message("file already exists!")
}
# Unzip
if (!file.exists(destfile)) {
message(paste0("Unzipping ",destfile,"..."))
R.utils::gunzip(gzfile, destname = destfile)
} else {
message("file already exists!")
}
# Read data into R.
uniprot_db <- fread(destfile, sep="\t", skip =1)
colnames(uniprot_db) <- c("UniProtKB-AC", "UniProtKB-ID", "GeneID (EntrezGene)",
"RefSeq", "GI", "PDB", "GO", "UniRef100", "UniRef90",
"UniRef50", "UniParc", "PIR", "NCBI-taxon", "MIM",
"UniGene", "PubMed", "EMBL", "EMBL-CDS", "Ensembl",
"Ensembl_TRS","Ensembl_PRO","Additional PubMed")
# Remove unzipped file!
unlink(destfile)
return(uniprot_db)
}
# Get Uniprot data for all three organisms.
uniprot_db <- lapply(as.list(c("HUMAN_9606","MOUSE_10090","RAT_10116")), build_uniprotDB)
names(uniprot_db) <- c("hs","mus","rat")
ensembl <- c(hitpredict$Ensembl1,hitpredict$Ensembl2)
ensembl <- sapply(strsplit(c(hitpredict$Ensembl1,hitpredict$Ensembl2),";"),"[")
ensembl
ensembl <- sapply(strsplit(c(hitpredict$Ensembl1,hitpredict$Ensembl2),","),"[")
ensembl
ensembl <- sapply(strsplit(c(hitpredict$Ensembl1,hitpredict$Ensembl2),","),"[",1)
ensembl
entrez <- mapIds(database, keys = ensembl, column = "ENTREZID",
keytype = "ENSEMBL", multivals = "first")
ensembl
taxid
# Get gene id mapping database for a given taxid.
if (taxid == 9606) {
require(org.Hs.eg.db)
database <- org.Hs.eg.db
message("Mapping human uniprot IDs to entrez!")
} else if (taxid == 10090) {
require(org.Mm.eg.db)
database <- org.Mm.eg.db
message("Mapping mouse uniprot IDs to entrez!")
} else if (taxid == 10116) {
require(org.Rn.eg.db)
database <- org.Rn.eg.db
message("Mapping rat uniprot IDs to entrez!")
} else {
stop("Please provide valid taxid c(9606, 10090, 10116).")
}
ensembl <- sapply(strsplit(c(hitpredict$Ensembl1, hitpredict$Ensembl2),","),"[",1)
entrez <- mapIds(database, keys = ensembl, column = "ENTREZID",
keytype = "ENSEMBL", multivals = "first")
ensembl
# Get all Uniprot IDs for a given taxid.
uniprot <- unique(c(as.character(hitpredict$Ensembl1)[hitpredict$Taxonomy == taxid]),
as.character(hitpredict$Ensembl2)[hitpredict$Taxonomy == taxid])
# Get all Uniprot IDs for a given taxid.
ensembl <- c(as.character(hitpredict$Ensembl1)[hitpredict$Taxonomy == taxid]),
as.character(hitpredict$Ensembl2)[hitpredict$Taxonomy == taxid])
# Get all Uniprot IDs for a given taxid.
ensembl <- c(hitpredict$Ensembl1[hitpredict$Taxonomy == taxid],
hitpredict$Ensembl2)[hitpredict$Taxonomy == taxid])
# Get all Uniprot IDs for a given taxid.
ensembl <- c(hitpredict$Ensembl1[hitpredict$Taxonomy == taxid],
hitpredict$Ensembl2[hitpredict$Taxonomy == taxid])
ensembl
# Get all Uniprot IDs for a given taxid.
ensembl <- sapply(strsplit(
c(hitpredict$Ensembl1[hitpredict$Taxonomy == taxid],
hitpredict$Ensembl2[hitpredict$Taxonomy == taxid]), ","),"[",1)
ensembl
# Get all Uniprot IDs for a given taxid.
ensembl <- unique(sapply(strsplit(
c(hitpredict$Ensembl1[hitpredict$Taxonomy == taxid],
hitpredict$Ensembl2[hitpredict$Taxonomy == taxid]), ","),"[",1))
# Get all Uniprot IDs for a given taxid.
ensembl <- na.omit(unique(sapply(strsplit(
c(hitpredict$Ensembl1[hitpredict$Taxonomy == taxid],
hitpredict$Ensembl2[hitpredict$Taxonomy == taxid]), ","),"[",1)))
ensembl
# Get all Uniprot IDs for a given taxid.
ensembl <- as.character(na.omit(unique(sapply(strsplit(
c(hitpredict$Ensembl1[hitpredict$Taxonomy == taxid],
hitpredict$Ensembl2[hitpredict$Taxonomy == taxid]), ","),"[",1))))
ensembl
# Map Uniprot ids to entrez.
entrez <- mapIds(database, keys = ensembl, column = "ENTREZID",
keytype = "ENSMBL", multiVals = "first")
# Map Uniprot ids to entrez.
entrez <- mapIds(database, keys = ensembl, column = "ENTREZID",
keytype = "ENSEMBL", multiVals = "first")
ensembl
taxid
# Get gene id mapping database for a given taxid.
if (taxid == 9606) {
require(org.Hs.eg.db)
database <- org.Hs.eg.db
message("Mapping human uniprot IDs to entrez!")
} else if (taxid == 10090) {
require(org.Mm.eg.db)
database <- org.Mm.eg.db
message("Mapping mouse uniprot IDs to entrez!")
} else if (taxid == 10116) {
require(org.Rn.eg.db)
database <- org.Rn.eg.db
message("Mapping rat uniprot IDs to entrez!")
} else {
stop("Please provide valid taxid c(9606, 10090, 10116).")
}
# Get all Uniprot IDs for a given taxid.
ensembl <- as.character(na.omit(unique(sapply(strsplit(
c(hitpredict$Ensembl1[hitpredict$Taxonomy == taxid],
hitpredict$Ensembl2[hitpredict$Taxonomy == taxid]), ","),"[",1))))
# Map Uniprot ids to entrez.
entrez <- mapIds(org.Mm.eg.db, keys = ensembl, column = "ENTREZID",
keytype = "ENSEMBL", multiVals = "first")
# Map Uniprot ids to entrez.
entrez <- mapIds(org.Mm.eg.db, keys = ensembl, column = "ENTREZID",
keytype = "ENSEMBL", multiVals = "first")
ensembl
colnames(hitpredict)
hitpredict$Homologs
colnames(hitpredict)
hitpredict$Uniprot1
# Get all Uniprot IDs for a given taxid.
ensembl <- as.character(na.omit(unique(sapply(strsplit(
c(hitpredict$Uniprot1[hitpredict$Taxonomy == taxid],
hitpredict$Uniprot2[hitpredict$Taxonomy == taxid]), ","),"[",1))))
# Get all Uniprot IDs for a given taxid.
uniprot <- as.character(na.omit(unique(sapply(strsplit(
c(hitpredict$Uniprot1[hitpredict$Taxonomy == taxid],
hitpredict$Uniprot2[hitpredict$Taxonomy == taxid]), ","),"[",1))))
# Map Uniprot ids to entrez.
entrez <- mapIds(org.Mm.eg.db, keys = uniprot, column = "ENTREZID",
keytype = "ENSEMBL", multiVals = "first")
uniprot
# Map Uniprot ids to entrez.
entrez <- mapIds(org.Mm.eg.db, keys = "P02340", column = "ENTREZID",
keytype = "ENSEMBL", multiVals = "first")
# Get all Uniprot IDs for a given taxid.
ensembl <- as.character(na.omit(unique(sapply(strsplit(
c(hitpredict$Uniprot1[hitpredict$Taxonomy == taxid],
hitpredict$Uniprot2[hitpredict$Taxonomy == taxid]), ","),"[",1))))
ensembl
# Create Ensembl2Entrez map.
db <- uniprot_db$mus
colnames(db)
db$Ensembl
strsplit(db$Ensembl,";")
sapply(strsplit(db$Ensembl,";"),"[",1)
map <- as.list(sapply(strsplit(db$Ensembl,";"),"[",1))
ensemblmap <- as.list(sapply(strsplit(db$Ensembl,";"),"[",1))
protmap <- as.list(sapply(strsplit(db$Ensembl,";"),"[",1))
names(protmap) <- db$`GeneID (EntrezGene)`
protmap
# Create Ensembl2Entrez map.
db <- uniprot_db$mus
protmap <- db$`GeneID (EntrezGene)`
names(protmap) <- as.list(sapply(strsplit(db$Ensembl,";"),"[",1))
ensembl %in% names(protmap)
sum(ensembl %in% names(protmap))
taxid
class(uniprot_db)
# Map uniprot IDs....
fixEntrez <- function(uniprot, taxid) {
# Get gene id mapping database for a given taxid.
if (taxid == 9606) {
require(org.Hs.eg.db)
database <- org.Hs.eg.db
message("Mapping human uniprot IDs to entrez!")
} else if (taxid == 10090) {
require(org.Mm.eg.db)
database <- org.Mm.eg.db
message("Mapping mouse uniprot IDs to entrez!")
} else if (taxid == 10116) {
require(org.Rn.eg.db)
database <- org.Rn.eg.db
message("Mapping rat uniprot IDs to entrez!")
} else {
stop("Please provide valid taxid c(9606, 10090, 10116).")
}
# Get all Uniprot IDs for a given taxid.
ensembl <- as.character(na.omit(unique(sapply(strsplit(
c(hitpredict$Ensembl1[hitpredict$Taxonomy == taxid],
hitpredict$Ensembl2[hitpredict$Taxonomy == taxid]), ","),"[",1))))
# Create Ensembl2Entrez map.
db <- uniprot_db$mus
protmap <- db$`GeneID (EntrezGene)`
names(protmap) <- as.list(sapply(strsplit(db$Ensembl,";"),"[",1))
sum(ensembl %in% names(protmap))
# Create Entrez2Uniprot map.
protmap <- as.list(entrez)
names(protmap) <- uniprot
# Map missing Entrez1.
is_missing1 <- is.na(hitpredict$Entrez1) & hitpredict$Taxonomy == taxid
hitpredict$Entrez1[is_missing1] <- unlist(protmap[hitpredict$Uniprot1[is_missing1]])
# Map missing Entrez2.
is_missing2 <- is.na(hitpredict$Entrez2) & hitpredict$Taxonomy == taxid
hitpredict$Entrez2[is_missing2] <- unlist(protmap[hitpredict$Uniprot1[is_missing2]])
# Remove null entries.
names(entrez) <- ensembl
entrez[seq(1:length(entrez))[unlist(lapply(entrez, is.null))]] <- NA
# Add back to data.
hitpredict$Entrez1[is_missing] <- unlist(entrez)
# Repeat for second protein...
is_missing <- is.na(hitpredict$Entrez2[hitpredict$Taxonomy==taxid])
idx <- hitpredict$Uniprot2[is_missing] %in% uniprot$`UniProtKB-AC`
ensembl <- sapply(strsplit(
uniprot$Ensembl[match(hitpredict$Uniprot2[is_missing],uniprot$`UniProtKB-AC`)],";"), "[",1)
entrez <- mapIds(database, keys = ensembl, column = "ENTREZID",
keytype = "ENSEMBL", multivals = "first")
# Remove null entries.
names(entrez) <- ensembl
entrez[seq(1:length(entrez))[unlist(lapply(entrez, is.null))]] <- NA
# Add back to data.
hitpredict$Entrez2[is_missing] <- unlist(entrez)
return(hitpredict)
}
taxid
# Get gene id mapping database for a given taxid.
if (taxid == 9606) {
require(org.Hs.eg.db)
database <- org.Hs.eg.db
message("Mapping human uniprot IDs to entrez!")
} else if (taxid == 10090) {
require(org.Mm.eg.db)
database <- org.Mm.eg.db
message("Mapping mouse uniprot IDs to entrez!")
} else if (taxid == 10116) {
require(org.Rn.eg.db)
database <- org.Rn.eg.db
message("Mapping rat uniprot IDs to entrez!")
} else {
stop("Please provide valid taxid c(9606, 10090, 10116).")
}
# Get all Uniprot IDs for a given taxid.
ensembl <- as.character(na.omit(unique(sapply(strsplit(
c(hitpredict$Ensembl1[hitpredict$Taxonomy == taxid],
hitpredict$Ensembl2[hitpredict$Taxonomy == taxid]), ","),"[",1))))
# Create Ensembl2Entrez map.
db <- uniprot_db$mus
protmap <- db$`GeneID (EntrezGene)`
names(protmap) <- as.list(sapply(strsplit(db$Ensembl,";"),"[",1))
ensembl %in% protmap
sum(ensembl %in% protmap)
uniprot_db <- do.call(rbind,uniprot_db)
uniprotDB <- do.call(rbind, uniprot_db)
# Get Uniprot data for all three organisms.
uniprotDB <- lapply(as.list(c("HUMAN_9606","MOUSE_10090","RAT_10116")), build_uniprotDB)
uniprotDB <- do.call(rbind, uniprot_db)
View(uniprotDB)
